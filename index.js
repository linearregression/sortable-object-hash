// Generated by CoffeeScript 1.7.1
(function() {
  var fillSize, template, zeroFill;

  template = require('lodash.template');

  module.exports = function(path, order, interpolated, opts) {
    var empty, hash;
    if (interpolated == null) {
      interpolated = {};
    }
    if (opts == null) {
      opts = {};
    }
    opts.interpolate || (opts.interpolate = /{([\s\S]+?)}/g);
    opts.empty || (opts.empty = 'after');
    opts.delimiter || (opts.delimiter = '.');
    empty = opts.empty === 'after' ? 'o' : '0';
    return hash = function(doc) {
      var field, has, i, index, key, one, searching, sort, tpl, _i, _j, _len, _len1, _ref;
      sort = '';
      for (i = _i = 0, _len = path.length; _i < _len; i = ++_i) {
        tpl = path[i];
        if (sort) {
          sort += 'x';
        }
        key = template(tpl, doc, {
          interpolate: opts.interpolate
        });
        _ref = key.split(opts.delimiter), key = _ref[0], field = _ref[1];
        field || (field = key);
        searching = key === tpl ? order[key] : interpolated[key];
        searching || (searching = []);
        has = doc[field] || '';
        if (!Array.isArray(has)) {
          has = [has];
        }
        for (_j = 0, _len1 = has.length; _j < _len1; _j++) {
          one = has[_j];
          index = searching.indexOf(one);
          if (index === -1) {
            sort += empty;
          } else {
            sort += zeroFill(index + 1, fillSize(searching.length));
          }
        }
      }
      return sort;
    };
  };

  fillSize = function(length) {
    return Math.ceil((length + 1) / 16);
  };

  zeroFill = function(number, width) {
    var dot;
    width -= number.toString(16).length;
    if (width > 0) {
      dot = /\./.test(number) ? 2 : 1;
      return new Array(width + dot).join('0') + number.toString(16);
    }
    return number.toString(16) + '';
  };

}).call(this);
